#!/bin/sh

# This is the main configuration file. It just happens to be a Bash
# shell script that generates the instruction tag memory
# initialization files as well as config.h

source $1

printf 'I$: %3d KiB (%d word lines)\n' $((1 << ($IC_LINE_INDEX_BITS + $IC_WORD_INDEX_BITS + 4 - 10))) $((1 << $IC_WORD_INDEX_BITS))
printf 'D$: %3d KiB (%d word lines)\n' $((1 << ($DC_LINE_INDEX_BITS + $DC_WORD_INDEX_BITS + 4 - 10))) $((1 << $DC_WORD_INDEX_BITS))

# Instruction cache (4-way associative)
IC_SET_INDEX_BITS=2     # Caches has four sets
IC_LINE_INDEX_BITS=$IC_LINE_INDEX_BITS
IC_WORD_INDEX_BITS=$IC_WORD_INDEX_BITS

# Data cache (4-way associative)
DC_SET_INDEX_BITS=2     # Caches has four sets
DC_LINE_INDEX_BITS=$DC_LINE_INDEX_BITS
DC_WORD_INDEX_BITS=$DC_WORD_INDEX_BITS

cat<<EOF  > config.h
// Do not edit this! Edit makeconfig.sh
// This configuration file was autogenerated by makeconfig.sh on `date`

// Cachable range
parameter CACHEABLE_BITS=$CACHEABLE_BITS;

// Instruction cache ($((1 << $IC_SET_INDEX_BITS))-way associtative $((1 << ($IC_SET_INDEX_BITS + $IC_LINE_INDEX_BITS + $IC_WORD_INDEX_BITS - 8))) KiB)
parameter IC_SET_INDEX_BITS=$IC_SET_INDEX_BITS;     // Caches has $((1 << $IC_SET_INDEX_BITS)) sets
parameter IC_LINE_INDEX_BITS=$IC_LINE_INDEX_BITS;    // Each set has $((1 << $IC_LINE_INDEX_BITS)) lines
parameter IC_WORD_INDEX_BITS=$IC_WORD_INDEX_BITS;    // Each line has $((1 << $IC_WORD_INDEX_BITS)) 32-bit words

// Data cache ($((1 << $DC_SET_INDEX_BITS))-way associtative $((1 << ($DC_SET_INDEX_BITS + $DC_LINE_INDEX_BITS + $DC_WORD_INDEX_BITS - 8))) KiB)
parameter DC_SET_INDEX_BITS=$DC_SET_INDEX_BITS;     // Caches has $((1 << $DC_SET_INDEX_BITS)) sets
parameter DC_LINE_INDEX_BITS=$DC_LINE_INDEX_BITS;    // Each set has $((1 << $DC_LINE_INDEX_BITS)) lines
parameter DC_WORD_INDEX_BITS=$DC_WORD_INDEX_BITS;    // Each line has $((1 << $DC_WORD_INDEX_BITS)) 32-bit words
EOF
