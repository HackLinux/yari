#!/bin/sh

# This is the main configuration file. It just happens to be a Bash
# shell script that generates the instruction tag memory
# initialization files as well as config.h

source $1

# Cachable range
CACHEABLE_BITS=32

printf 'I$: %3d KiB (%d word lines)\n' $((1 << ($IC_LINE_INDEX_BITS + $IC_WORD_INDEX_BITS + 4 - 10))) $((1 << $IC_WORD_INDEX_BITS))
printf 'D$: %3d KiB (%d word lines)\n' $((1 << ($DC_LINE_INDEX_BITS + $DC_WORD_INDEX_BITS + 4 - 10))) $((1 << $DC_WORD_INDEX_BITS))

# Instruction cache (4-way associtative tag-sequential 8 KiB)
IC_SET_INDEX_BITS=2     # Caches has four sets
IC_LINE_INDEX_BITS=$IC_LINE_INDEX_BITS    # Each set has 128 lines
IC_WORD_INDEX_BITS=$IC_WORD_INDEX_BITS    # Each line has 4 32-bit words (128 bits)

# Data cache (4-way associtative tag-sequential 16 KiB)
DC_SET_INDEX_BITS=2     # Caches has four sets
DC_LINE_INDEX_BITS=$DC_LINE_INDEX_BITS    # Each set has 256 lines
DC_WORD_INDEX_BITS=$DC_WORD_INDEX_BITS    # Each line has 4 32-bit words (128 bits)

cat<<EOF  > config.h
// Don't edit this! Edit config.sh
// This configuration file was autogenerated by config.sh on `date`

// Cachable range
parameter CACHEABLE_BITS=$CACHEABLE_BITS;

// Instruction cache (4-way associtative tag-sequential 8 KiB)
parameter IC_SET_INDEX_BITS=$IC_SET_INDEX_BITS;     // Caches has four sets
parameter IC_LINE_INDEX_BITS=$IC_LINE_INDEX_BITS;    // Each set has 128 lines
parameter IC_WORD_INDEX_BITS=$IC_WORD_INDEX_BITS;    // Each line has 4 32-bit words (128 bits)

// Data cache (4-way associtative tag-sequential 16 KiB)
parameter DC_SET_INDEX_BITS=$DC_SET_INDEX_BITS;     // Caches has four sets
parameter DC_LINE_INDEX_BITS=$DC_LINE_INDEX_BITS;    // Each set has 256 lines
parameter DC_WORD_INDEX_BITS=$DC_WORD_INDEX_BITS;    // Each line has 4 32-bit words (128 bits)
EOF

gen_tag() {
  name=$1
  size=$2
  val=$3
  width=$4
  depth=$5

  echo gen_tag $name $size $val $width $depth

  cat<<EOF  > $name.mif
-- Memory Initialization File (.mif) for tag$set


WIDTH=$width;
DEPTH=$depth;

ADDRESS_RADIX=HEX;
DATA_RADIX=HEX;

CONTENT BEGIN
EOF

   rm -f $name.data
   csi=0
   while [ $csi -lt $size ]; do
      printf "\t%08x : %x;\n" $csi $val >> $name.mif
      printf "%x\n" $val >> $name.data
      csi=$((csi + 1))
   done
   echo "END;" >> $name.mif
}

IC_SET_BITS=$((IC_LINE_INDEX_BITS + IC_WORD_INDEX_BITS + 2))
IC_TAG_BITS=$((CACHEABLE_BITS - IC_SET_BITS))

# Now generate tagX.mif
for set in 0 1 2 3; do
  size=$((1 << IC_LINE_INDEX_BITS))
  name=icache_tag$set
  val=$(((0xBFC00000 >> IC_SET_BITS) + set))
  gen_tag $name $size $val $IC_TAG_BITS $((1 << IC_LINE_INDEX_BITS))
done

DC_SET_BITS=$((IC_LINE_INDEX_BITS + IC_WORD_INDEX_BITS + 2))
DC_TAG_BITS=$((CACHEABLE_BITS - DC_SET_BITS))

# Now generate tagX.mif
for set in 0 1 2 3; do
  size=$((1 << DC_LINE_INDEX_BITS))
  name=dcache_tag$set
  val=$(((0xFFFFFFFF >> DC_SET_BITS) - set))
  gen_tag $name $size $val $DC_TAG_BITS $((1 << DC_LINE_INDEX_BITS))
done

