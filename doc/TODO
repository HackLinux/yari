PIPELINE OVERVIEW:

    (Beware, currently there's a fairly loose mapping between pipeline
    stages and corresponding RTL files.)


    IF DE EX/ME1 ME2 WB

    IF  - pc calculation / handle restarts and kill
          I$ tag lookup
          I$ access
          late select

    DE  - begin register file lookup, partial decoding, address calc

    EX/ME1
        - bypass and alu computations
          D$ tag lookup
          D$ access
          late select

    ME2 - load align

    WB  - register file write-back.


IDEAS

* Decouple the cache fill part from the rest of the pipeline (both I$
  and D$)

* Streamline the restart handling

* Investigate replaying (eg. add a mux to the IF output and reduce
  restart penalty by one cycle)

* Investigate minimizing the branch penalty.

* Implement interrupt support

* Introduce a x_pc_restart rather than litter the RTL with the same
  calculation over and over.

* Extend D$ to be a write back cache (not as hard as I thought).

* Implement the full MIPS32R2 instruction set (keeping a close eye on
  cycle time impact). In particular, conditional moves are expected to
  help IPC.

* Make it conform more closely to MIPS32R2. For starters, the memory
  layout is borked. Need to support uncached access, shudder.

* Write a SSRAM controller (for the DE2-70).

* Write a PSRAM controller (for the LPRP).

* preload the I$ with a boot-loader that copy the firmware in
  preloaded D$ to RAM.  This way we can get rid of the need for
  locking (wasting) half the I$ to firmware.

* We're dancing on eggshells; instructions modifying non-register
  state in EX wouldn't behave correctly when flushed from ME! (eg, lw
  $3, ($4); mthi $5). The only reason there are no known bugs is
  because currently the only flushes from ME are restarts.

  If ME is ever taught to trap (misalignment, segmentation violation,
  permission problems, page miss, etc), then this will require
  immediate attention.


  Fixing this requires moving all architectual state updates to the
  latest stage that can flush the pipe (and thus annul the updates).

  Doing this requires one of two approaches: The simplest is to move
  their implementation to stage ME, that is, give them an additional
  cycle of latency, and add the hazard checking.

  The more advanced approach is to maintain two copies of the state:
  the speculative in the earlier state and the committed state in ME
  (or WB). Pipe restarts will copy the committed state back into the
  speculative state, while normal (and valid) instructions will update
  the commited state just like the register file.

  Ex:                               LO
                                SPEC  COMMITTED
    ld   $r3, ($r0)              old    old
    mtlo $r2                     $r2    old
    <exception from ld detected> old    old

  Ex:                               LO
                                SPEC  COMMITTED
    mtlo $r2                     $r2    old
    mflo $r3                     $r2    old
    addi $r4,$r3,2               $r2    $r2

  (These are poorly chosen examples as mtlo is idempotent and does not
  strictly speaking need this until we implement memory exceptions,
  but imagine something like mul or other that can change the state in
  a different way each time.)

* Integrate testall.S into tinymon.c

* Change makeconfig.sh to instead parse config.h (which should now be
  written by hand). This is in preparation for moving many more
  configurable features to the config.h

* Port to Xilinx' ML401 and one of the Spartan-3 starter kits

* Trap on ADD[I] and SUB overflow

* (PERF) Make the video interface much more efficient and have all major
  parameters settable from IO space (where it makes sense). Lot's of
  MSB counters as these are cheap and fast. Example:

     if (x[X_MSB])
       x <= video_registers_xwidth;
     else
       x <= x - 1;



OTHER:
* Collect interesting workloads (SPECint, EEMBC, MiBench, ...)

* Improve documentation, notably how to build and port the RTL

* Restructure the RTL so that it matches the actual pipeline better
  and all stage_XX outputs are guaranteed to be registers.

* (PERF) Make I$ cache words wider and use the extra bits for, say:
  - Poor-mans two bit branch prediction
  - Pre-decode key instruction, such as branches and jumps
  - Pre calculate part of the destination of branches/jumps
  All aimed at issueing control flow instructions (sometimes
  speculatively) from DE, saving one precious pipeline bubble.

* (PERF) Change the bypass mux from the current priority encoded mux
  to a regular mux and precompute the index in DE.

* (PERF) Better cache replacement strategy (at least use pseudo
  random, but investigate how hard pseudo-LRU would be to implement)
  Done for D$, but not yet for I$ (cache locking is an issue).

* Support more of CP2 and move it to a later stage (cf. correct
  handling of pipeline flushes)

* Trap on illegal instructions

* (PERF) Conditional support for pipeline stalls (need to examine the
  cycle-time penalty and the cost-benefit)

* Make the simulator more complete, incl. support for CP2 features
  like virtual memory etc.

* The I$ tags are very inefficient four 20x32 arrays. Investigate

  - Making the tag(s) single port arrays (thus two in a ram block)

  - Making a single combined 80x32 array - all tags are read at the
    same time anyway and four 20-bit 4-to-1 muxes can handle the writing

  - Using smaller blocks, say 32-byte instead of 128-byte (tags are
    cheap). (4Kb = 512 B = 128 W) Faster fill and better
    utilization. [DID THAT]


* Reconsider cosimulating against gxemul. I'd obviously need to fill
  in the gaps where gxemul takes a shortcut (such as providing a real
  firmware). Q: how to deal with the IO?

* Make the RTL simulation snapshotable and restartable. Only way to
  deal with the 250 inst/sec performance. (This is a generalization of

* Write the dummy firmware expected by the linux kernel for the
  DECstation. (See gxemul/src/machines/machine_pmax.c and
  gxemul/src/promemul/dec_prom.c)

* Add a small ROM to the RTL implementation (maybe)

* (PERF) IO load performance could be dramatically sped up if we can
  require that peripherals can respond with zero latency. This is
  probably not very hard for a small system, but it's a strong
  constraint.

  The current cost is so high because we have to restart the load
  (just like with a D$ miss). If we could stall the cost would be
  lower, but stalling is way too costly this late in the
  pipeline. Besides, does the cost of IO loads really matter that
  much?

1. Debugging with the GDB stub:

   1a. Interrupts support
       ISASIM: Implement the CP0 registers and UART interrupts
       RTL:    -- " -- + bind a Dev board button to break

   1b. Get single stepping working (GDB stub work mostly).


3. SDRAM support.

4. Better infrastructure for peripherals
5. CF support.
6. Ethernet.
7. PS/2 Keyboard
8. Sound output.
9. Flash RAM support.
A. PS/2 Mouse.

PERFORMANCE
- (ADV) Don't block while filling the I$.  Not obvious how to achieve
  this without inserting logic between the I$ ram and the decode
  stage.

- (ADV) Non-blocking loads.  For a single outstanding load it's
  actually not too hard, but we'll have to stall the pipe if the
  write-back stage is busy when the memory comes back to us.  Multiple
  outstanding are probably not worth the trouble.

OTHER

4. Consistent naming convention (FOREVER ONGOING)

    * nets are prefixed with the module that produces them (mostly
      already the case).

    * nets include an underscore `_' after the module prefix if
      they're one cycle delayed from the source registers.  Nearly all
      clocked registers applies.
